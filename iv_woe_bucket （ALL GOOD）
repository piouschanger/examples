#导入数据
import pandas as pd
import numpy as np
df = pd.read_csv('C:/Users/Wu Ran/Desktop/model6.csv')
df.describe().to_csv('DataDescribe.csv')
df.head()



#把能最优分箱的进行最优分箱
import scipy.stats as stats
def mono_bin(Y,X,n):
    good=Y.sum()
    bad=Y.count()-good
    r=0
    while np.abs(r)<1:
        d1=pd.DataFrame({'X':X,'Y':Y,'Bucket':pd.qcut(X,n)})
        d2=d1.groupby(['Bucket'])
        r,p=stats.spearmanr(d2['X'].mean(),d2['Y'].mean())
        n=n-1
#同时得到了某个d2和n
    print(r,n)
    d3=pd.DataFrame(d2['X'].min(),columns=['min'])
    d3['min']=d2['X'].min()
    d3['max']=d2['X'].max()
    d3['sum']=d2['Y'].sum()
    d3['total']=d2['Y'].count()
    d3['rate']=d2['Y'].mean()
    d3['goodattribute']=d3['sum']/good
    d3['badattribute']=(d3['total']-d3['sum'])/bad
    d3['woe']=np.log(d3['goodattribute']/d3['badattribute'])
    iv=((d3['goodattribute']-d3['badattribute'])*d3['woe']).sum()
    d4=d3.sort_index(by='min')
    woe=list(d4['woe'].values)
    print(d4)
    print('-'*30)
    cut=[]
    #float('inf') 为正无穷，而不是直接写inf
    cut.append(float('-inf'))
    for i in range(1,n+1):
        qua=X.quantile(i/(n+1))
        cut.append(round(qua,4))
    cut.append(float('inf'))
    return d4,iv,woe,cut
#cut是对X取他的四分位，因为Y只有0  1  也不能取四分位。n=3因为最后有n-1，所以实际上是分成了四个桶，woe是四个值。goodattribute是好的属性的意思
dfx2,ivx2,woex2,cutx2=mono_bin(df['y'],df['phone_gray_score'],n=3)
dfx3,ivx3,woex3,cutx3=mono_bin(df['y'],df['mobileonline'], n=3)
dfx6,ivx6,woex6,cutx6=mono_bin(df['y'],df['searched_org_cnt'], n=3)
#dfx5,ivx5,woex5,cutx5=mono_bin(df['y'],df['contract_break_rate'], n=50)



#不能最优分箱的自己手动分箱
def self_bin(Y,X,cat):#自定义人工分箱函数
    good=Y.sum()   #好用户数量
    bad=Y.count()-good   # 坏用户数量
    d1=pd.DataFrame({'X':X,'Y':Y,'Bucket':pd.cut(X,cat)}) #建立个数据框 X-- 各个特征变量 ， Y--用户好坏标签 ， Bucket--各个分箱
    d2=d1.groupby('Bucket', as_index = True)     #  按分箱分组聚合 ，并且社会为 Index
    d3 = pd.DataFrame(d2.X.min(), columns=['min'])  #  添加 min 列 ,不用管里面的 d2.X.min()
    d3['min'] = d2.min().X    #求每个箱段内 X 比如 家庭人数的最小值
    d3['max'] = d2.max().X    #求每个箱段内 X 比如 家庭人数的最大值
    d3['sum'] = d2.sum().Y    #求每个箱段内 Y 好客户的个数
    d3['total'] = d2.count().Y  #求每个箱段内  总共客户数
    d3['rate'] = d2.mean().Y    # 好客户率
    #WOE的全称是“Weight of Evidence”，即证据权重。WOE是对原始自变量的一种编码形式。是为了 计算 iv 准备的
    #要对一个变量进行WOE编码，需要首先把这个变量进行分组处理（也叫离散化、分箱等等，说的都是一个意思）
    d3['woe'] = np.log((d3['rate'] / (1 - d3['rate'])) / (good / bad))   
    d3['goodattribute'] = d3['sum'] / good     # 每个箱段内 好用户 占 总好用户数  的 比率
    d3['badattribute'] = (d3['total'] - d3['sum']) / bad  # 每个箱段内 坏用户 占 总坏用户数 的 比率
    #IV的全称是Information Value，中文意思是信息价值，或者信息量。  通俗的说 就是 变量的预测能力
    iv = ((d3['goodattribute'] - d3['badattribute']) * d3['woe']).sum()
    d4 = (d3.sort_index(by='min'))   #数据框 的 按 min 升序排列
    woe = list(d4['woe'].round(3))
    return d4, iv,woe
#对他们就行分箱处理：

ninf=float('-inf')
pinf=float('inf')
cutx1=[ninf,0.027,0.077,0.14,pinf]
cutx4 = [ninf, 699, 738, pinf]
cutx5 = [ninf, 0.20339, 0.301075, 0.401274, pinf]
cutx7 = [ninf, 0, 0.1486, 0.2545, pinf]
#cutx9 = [ninf, 0, 1, 3, pinf]
dfx1,ivx1,woex1 = self_bin(df['y'],df['jobyears'], cutx1)
dfx4,ivx4,woex4= self_bin(df['y'],df['bairong'], cutx4)
dfx5,ivx5,woex5 = self_bin(df['y'],df['contacts_router_ratio'], cutx5)
dfx7,ivx7,woex7 = self_bin(df['y'],df['contract_break_rate'], cutx5)
dfx7,ivx7,woex7


#画IV值图
import matplotlib.pyplot as plt  
ivlist=[ivx1,ivx2,ivx3,ivx4,ivx5,ivx6,ivx7]#各变量IV
index=['x1','x2','x3','x4','x5','x6','x7']#x轴的标签
fig1 = plt.figure(1)
ax1 = fig1.add_subplot(1, 1, 1)
x = np.arange(len(index))+1
ax1.bar(x, ivlist, width=0.4)#生成柱状图
ax1.set_xticks(x)
ax1.set_xticklabels(index, rotation=0, fontsize=12)
ax1.set_ylabel('IV(Information Value)', fontsize=14)
#在柱状图上添加数字标签
for a, b in zip(x, ivlist):
    plt.text(a, b + 0.01, '%.4f' % b, ha='center', va='bottom', fontsize=10)
plt.show()



#用woe值替代原来的值
from pandas import Series
def replace_woe(series,cut,woe):
    list=[]
    i=0
    while i<len(series):
        valuek=series[i]
        j=len(cut)-2
        m=len(cut)-2
        while j>=0:
            if valuek>=cut[j]:
                j=-1
            else:
                j -=1
                m -= 1
        list.append(woe[m])
        i += 1
    return list
    
# 替换成woe
df['jobyears'] = Series(replace_woe(df['jobyears'], cutx1, woex1))
df['phone_gray_score'] = Series(replace_woe(df['phone_gray_score'], cutx2, woex2))
df['mobileonline'] = Series(replace_woe(df['mobileonline'], cutx3, woex3))
df['bairong'] = Series(replace_woe(df['bairong'], cutx4, woex4))
df['contacts_router_ratio'] = Series(replace_woe(df['contacts_router_ratio'], cutx5, woex5))
df['searched_org_cnt'] = Series(replace_woe(df['searched_org_cnt'], cutx6, woex6))
df['contract_break_rate'] = Series(replace_woe(df['contract_break_rate'], cutx7, woex7))
df.to_csv('WoeData.csv', index=False)


#第五步：将数据集拆分为训练集和测试集
df = pd.read_csv('WoeData.csv')

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
Y=df['y']
X=df.ix[:,1:]

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=0)

train=pd.concat([Y_train,X_train],axis=1)
test=pd.concat([Y_test,X_test],axis=1)


#模型评估结果显示
import numpy as np
import statsmodels.api as sm
from sklearn.linear_model import LogisticRegression
data = pd.read_csv('WoeData.csv')
#应变量
Y=data['y']
#自变量，剔除对因变量影响不明显的变量
X=data.drop(['y'],axis=1)
X1=sm.add_constant(X)
logit=sm.Logit(Y,X1)
result=logit.fit()
print(result.summary())


#画ROC图
from sklearn.metrics import roc_curve,auc
import matplotlib
matplotlib.rcParams['font.sans-serif'] = ['FangSong']    # 指定默认字体
matplotlib.rcParams['axes.unicode_minus'] = False
Y_test=test['y']
X_test=test.drop(['y'],axis=1)

X2=sm.add_constant(X_test)
resu=result.predict(X2)
fpr,tpr,threshold=roc_curve(Y_test,resu)
# %f,%d,%s输出    
rocauc=auc(fpr,tpr)
plt.plot(fpr,tpr,'b',label='AUC=%0.2f'% rocauc)
plt.title('ROC curve (AUC = %0.4f)' % rocauc, fontsize=25)
plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'r--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()



#画KS图
fig, ax = plt.subplots()
ax.plot(1 - threshold, tpr, label='tpr') # ks曲线要按照预测概率降序排列，所以需要1-threshold镜像
ax.plot(1 - threshold, fpr, label='fpr')
ax.plot(1 - threshold, tpr-fpr,label='KS')
plt.xlabel('score')
plt.title('KS Curve (KS = %0.4f)' % (max(tpr-fpr)), fontsize=25)
plt.xlim([0.4, 0.8])
plt.ylim([0.0, 1.0])
plt.figure(figsize=(20,20))
legend = ax.legend(loc='upper left')
plt.show()
