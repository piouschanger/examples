import pandas as pd
import numpy as np

#导入数据
df = pd.read_csv('C:/Users/Wu Ran/Desktop/bairong.csv')
df.describe().to_csv('DataDescribe.csv')
df


#WOE值计算
cut1=pd.qcut(df["score"],5,labels=False, duplicates='drop')
#cut2=pd.qcut(df["jd"],5,labels=False, duplicates='drop')
#cut3=pd.qcut(df["yl"],5,labels=False, duplicates='drop')
rate=df["y"].sum()/(df["y"].count()-df["y"].sum())
def get_woe_data(cut):
    grouped=df["y"].groupby(cut,as_index = True).value_counts()
    woe=np.log(grouped.unstack().iloc[:,1]/grouped.unstack().iloc[:,0]/rate)
    return woe
cut1_woe=get_woe_data(cut1)
#cut2_woe=get_woe_data(cut2)
#cut3_woe=get_woe_data(cut3)


import matplotlib.pyplot as plt
cut1_woe.plot.bar(color='b',alpha=0.3,rot=0)


#画图plt里面中文显示
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False
#IV值计算
def get_IV_data(cut,cut_woe):
    grouped=df["y"].groupby(cut,as_index = True).value_counts()
    cut_IV=((grouped.unstack().iloc[:,1]/df["y"].sum()-grouped.unstack().iloc[:,0]/(df["y"].count()-df["y"].sum()))*cut_woe).sum()    
    return cut_IV
#计算各分组的IV值
cut1_IV=get_IV_data(cut1,cut1_woe)
#cut2_IV=get_IV_data(cut2,cut2_woe)
#cut3_IV=get_IV_data(cut3,cut3_woe)

IV=pd.DataFrame([cut1_IV],index=['score'],columns=['IV'])
iv=IV.plot.bar(color='b',alpha=0.3,rot=30,figsize=(10,5),fontsize=(10))
iv.set_title('特征变量与IV值分布图',fontsize=(15))
iv.set_xlabel('特征变量',fontsize=(15))
iv.set_ylabel('IV',fontsize=(15))

IV


#WOE值替换
df_new=pd.DataFrame()   #新建df_new存放woe转换后的数据
def replace_data(cut,cut_woe):
    a=[]
    for i in cut.unique():
        a.append(i)
        a.sort()
    for m in range(len(a)):
        cut.replace(a[m],cut_woe.values[m],inplace=True)
    return cut
df_new["y"]=df["y"]
df_new["score"]=replace_data(cut1,cut1_woe)
#df_new["jd"]=replace_data(cut2,cut2_woe)
#df_new["yl"]=replace_data(cut3,cut3_woe)
df_new


from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
x = df_new.iloc[:,1:]
y = df_new.iloc[:,:1]
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=0)
model = LogisticRegression(C=1, penalty='l1')
clf = model.fit(x_train,y_train)
print('测试成绩：{}'.format(clf.score(x_test,y_test)))


coe=clf.coef_        #特征权值系数，后面转换为打分规则时会用到
coe


y_pred=clf.predict(x)


#ROC曲线
from sklearn.metrics import roc_curve, auc
fpr, tpr, threshold = roc_curve(df_new["y"], df_new["score"])
roc_auc = auc(fpr, tpr)
plt.plot(fpr, tpr, color='red',label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy',  linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.0])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC curve (AUC = %0.4f)' % roc_auc, fontsize=25)
plt.legend(loc="lower right")
plt.show()


Grp = df.groupby('y')
total_bad = Grp.size()[0]
total_good = Grp.size()[1]
print(total_bad)
print(total_good)


import pandas as pd
def PlotKS(preds, labels, n, asc):
    
    # preds is score: asc=1
    # preds is prob: asc=0
    
    pred = preds  # 预测值
    bad = labels  # 取1为bad, 0为good
    ksds = pd.DataFrame({'bad': bad, 'pred': pred})
    ksds['good'] = 1 - ksds.bad
    
    if asc == 1:
        ksds1 = ksds.sort_values(by=['pred', 'bad'], ascending=[True, True])
    elif asc == 0:
        ksds1 = ksds.sort_values(by=['pred', 'bad'], ascending=[False, True])
    ksds1.index = range(len(ksds1.pred))
    ksds1['cumsum_good1'] = 1.0*ksds1.good.cumsum()/sum(ksds1.good)
    ksds1['cumsum_bad1'] = 1.0*ksds1.bad.cumsum()/sum(ksds1.bad)
    
    if asc == 1:
        ksds2 = ksds.sort_values(by=['pred', 'bad'], ascending=[True, False])
    elif asc == 0:
        ksds2 = ksds.sort_values(by=['pred', 'bad'], ascending=[False, False])
    ksds2.index = range(len(ksds2.pred))
    ksds2['cumsum_good2'] = 1.0*ksds2.good.cumsum()/sum(ksds2.good)
    ksds2['cumsum_bad2'] = 1.0*ksds2.bad.cumsum()/sum(ksds2.bad)
    
    # ksds1 ksds2 -> average
    ksds = ksds1[['cumsum_good1', 'cumsum_bad1']]
    ksds['cumsum_good2'] = ksds2['cumsum_good2']
    ksds['cumsum_bad2'] = ksds2['cumsum_bad2']
    ksds['cumsum_good'] = (ksds['cumsum_good1'] + ksds['cumsum_good2'])/2
    ksds['cumsum_bad'] = (ksds['cumsum_bad1'] + ksds['cumsum_bad2'])/2
    
    # ks
    ksds['ks'] = ksds['cumsum_bad'] - ksds['cumsum_good']
    ksds['tile0'] = range(1, len(ksds.ks) + 1)
    ksds['tile'] = 1.0*ksds['tile0']/len(ksds['tile0'])
    
    qe = list(np.arange(0, 1, 1.0/n))
    qe.append(1)
    qe = qe[1:]
    
    ks_index = pd.Series(ksds.index)
    ks_index = ks_index.quantile(q = qe)
    ks_index = np.ceil(ks_index).astype(int)
    ks_index = list(ks_index)
    
    ksds = ksds.loc[ks_index]
    ksds = ksds[['tile', 'cumsum_good', 'cumsum_bad', 'ks']]
    ksds0 = np.array([[0, 0, 0, 0]])
    ksds = np.concatenate([ksds0, ksds], axis=0)
    ksds = pd.DataFrame(ksds, columns=['tile', 'cumsum_good', 'cumsum_bad', 'ks'])
    
    ks_value = ksds.ks.max()
    ks_pop = ksds.tile[ksds.ks.idxmax()]
    print ('ks_value is ' + str(np.round(ks_value, 4)) + ' at pop = ' + str(np.round(ks_pop, 4)))
    
    # chart
    plt.plot(ksds.tile, ksds.cumsum_good, label='cum_good',
                         color='blue', linestyle='-', linewidth=2)
                         
    plt.plot(ksds.tile, ksds.cumsum_bad, label='cum_bad',
                        color='red', linestyle='-', linewidth=2)
                        
    plt.plot(ksds.tile, ksds.ks, label='ks',
                   color='green', linestyle='-', linewidth=2)
                       
    plt.axvline(ks_pop, color='gray', linestyle='--')
    plt.axhline(ks_value, color='green', linestyle='--')
    plt.axhline(ksds.loc[ksds.ks.idxmax(), 'cumsum_good'], color='blue', linestyle='--')
    plt.axhline(ksds.loc[ksds.ks.idxmax(),'cumsum_bad'], color='red', linestyle='--')
    plt.title('KS=%s ' %np.round(ks_value, 4) +  
                'at Pop=%s' %np.round(ks_pop, 4), fontsize=25)
    return ksds

PlotKS(preds=df_new["score"], labels=df_new["y"], n=4, asc=0)
